@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using CalisVita.Components.Account.Shared
@using CalisVita.Model
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore
@inject SignInManager<User> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>
<StatusMessage Message="@statusMessage" IsError="@isError" />

<style>
    .page-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 80vh;
        margin: 0;
        
    }

    /* Welcome sign styling */
    .welcome-sign {
        text-align: center;
        font-size: 2rem;
        font-weight: 700;
        color: #34495e;
        margin-bottom: 1rem;
    }


    /* Card styling */
    .card {
        max-width: 500px;
        width: 100%;
        border-radius: 12px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        background: #ffffff;
    }

    .card-body {
        padding: 2rem;
        background-color: #f7f9fc;
        position: relative;
    }

    /* Card title styling */
    .card-title {
        text-align: center;
        color: #2c3e50;
        font-weight: 700;
        font-size: 1.8rem;
        margin-bottom: 1.5rem;
    }

    /* Form label styling */
    .form-label {
        font-weight: 500;
        color: #546e7a;
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
    }

    /* Input field styling */
    .form-control {
        border-radius: 8px;
        padding: 0.9rem;
        font-size: 1rem;
        border: 1px solid #ccd1d9;
        transition: all 0.2s ease;
    }

        .form-control:focus {
            border-color: #3498db;
            box-shadow: 0 0 0 0.15rem rgba(52, 152, 219, 0.25);
        }

    /* Button styling */
    .btn {
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background-color: #3498db;
        color: #ffffff;
        border: none;
    }

        .btn-primary:hover {
            background-color: #2c81ba;
            box-shadow: 0 4px 10px rgba(52, 152, 219, 0.3);
        }

    .action-buttons {
        display: flex;
        gap: 1rem;
        margin-top: 1.5rem;
    }

    /* Footer section with link */
    .card-footer {
        text-align: center;
        margin-top: 1rem;
        color: #7f8c8d;
    }

        .card-footer a {
            color: #3498db;
            font-weight: 600;
            text-decoration: none;
        }

            .card-footer a:hover {
                text-decoration: underline;
            }

    /* Decorative circle */
    .decorative-circle {
        position: absolute;
        top: -25px;
        right: -25px;
        width: 50px;
        height: 50px;
        background-color: #3498db;
        border-radius: 50%;
        opacity: 0.15;
    }
</style>
<div class="page-container">
    <div class="welcome-sign">Welcome to CalisVita!</div>
    <div class="card border-secondary">
        <div class="decorative-circle"></div>
        <div class="card-body">
            <h4 class="card-title">Register to CalisVita</h4>

            <EditForm OnValidSubmit="RegisterUser" Model="Model" FormName="registerForm">
                <div class="row g-3">
                    <div class="col-md-12">
                        <label for="email" class="form-label">Email</label>
                        <InputText class="form-control" placeholder="name@example.com" @bind-Value="Model.Email" />
                    </div>
                    <div class="col-md-6">
                        <label for="password" class="form-label">Password</label>
                        <InputText type="password" class="form-control" placeholder="Password" @bind-Value="Model.Password" />
                    </div>
                    <div class="col-md-6">
                        <label for="confirm-password" class="form-label">Confirm Password</label>
                        <InputText type="password" class="form-control" placeholder="Confirm Password" @bind-Value="Model.ConfirmPassword" />
                    </div>
                    <div class="action-buttons">
                        <button type="submit" class="btn btn-primary w-100">Register</button>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="card-footer">
            Already have an account? <a href="@(NavigationManager.ToAbsoluteUri("Account/Login"))">Login</a>
        </div>
    </div>
</div>


@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private RegisterModel Model { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? statusMessage => identityErrors is null ? null : string.Join(" ", identityErrors.Select(error => error.Description));
    private bool isError;

    public async Task RegisterUser(EditContext editContext)
    {
        var user = Activator.CreateInstance<User>(); ;
        await UserStore.SetUserNameAsync(user, Model.Email, CancellationToken.None);
        var emailStore = (IUserEmailStore<User>)UserStore;
        await emailStore.SetEmailAsync(user, Model.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Model.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            isError = true;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private sealed class RegisterModel
    {
        public string Email { get; set; } = "";

        public string Password { get; set; } = "";

        public string ConfirmPassword { get; set; } = "";
    }
}
