@using CalisVita.Components.Shared
@using CalisVita.Context
@using CalisVita.Model
﻿@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject DatabaseContext DbContext
@inject WorkoutProvider WorkoutProvider
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager
@page "/library"



<PageTitle>Library</PageTitle>

<h3>Workout Library</h3>

@if (selectedWorkoutType == null)
{
    <!-- Display Workout Types as Cards -->
    <div class="row">
        @foreach (var type in workoutTypes)
        {
            <div class="col-4">
                <div class="card text-center" style="cursor: pointer;" @onclick="() => SelectWorkoutType(type)">
                    <div class="card-body">
                        <h5 class="card-title">@type</h5>
                    </div>
                </div>
            </div>
        }
    </div>
}
else if (selectedWorkout == null)
{
    <!-- Display Workouts of Selected Type -->
    <button @onclick="ClearSelection">Back to Types</button>
    <h3>@selectedWorkoutType Workouts</h3>
    <div class="row">
        @foreach (var workout in filteredWorkouts)
        {
            <div class="col-4">
                <div class="card text-center" style="cursor: pointer;" @onclick="() => SelectWorkout(workout)">
                    <div class="card-body">
                        <h5 class="card-title">@workout.WorkoutName</h5>
                        <p class="card-text">@workout.WorkoutInfo</p>
                        <p class="card-text">Level: @workout.WorkoutLevel</p>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <!-- Display Selected Workout Details -->
    <button @onclick="ClearWorkoutSelection">Back to Workouts</button>
    <div class="workout-details">
        <h3>@selectedWorkout.WorkoutName</h3>
        <p>@selectedWorkout.WorkoutInfo</p>
        <p>Workout Level: @selectedWorkout.WorkoutLevel</p>
    </div>
}

@code {
    private IEnumerable<Workout> allWorkouts;
    private IEnumerable<Workout> filteredWorkouts;
    private List<string> workoutTypes = new List<string>();

    private string selectedWorkoutType;
    private Workout selectedWorkout;

    protected override async Task OnInitializedAsync()
    {
        // Load all workouts from the provider and identify unique workout types
        allWorkouts = await WorkoutProvider.GetAllWorkoutsAsync();
        workoutTypes = allWorkouts.Select(w => w.WorkoutType).Distinct().ToList();
    }

    private void SelectWorkoutType(string type)
    {
        // Set the selected workout type and filter workouts to show only those of this type
        selectedWorkoutType = type;
        filteredWorkouts = allWorkouts.Where(w => w.WorkoutType == type);
    }

    private void ClearSelection()
    {
        // Clear the selected type to return to the types view
        selectedWorkoutType = null;
        filteredWorkouts = null;
    }

    private void SelectWorkout(Workout workout)
    {
        // Set the selected workout to show its details
        selectedWorkout = workout;
    }

    private void ClearWorkoutSelection()
    {
        // Clear the selected workout to return to the filtered workout view
        selectedWorkout = null;
    }
}